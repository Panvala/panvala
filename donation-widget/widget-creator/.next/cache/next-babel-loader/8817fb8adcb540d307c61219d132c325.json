{"ast":null,"code":"import _slicedToArray from \"/Users/ankit/Documents/crypto/gr8/panvala/donation-widget/widget-creator/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useCallback, useState, useEffect } from 'react';\n\nfunction useCopyToClipboard(text) {\n  _s();\n\n  var copyToClipboard = function copyToClipboard(str) {\n    var el = document.createElement('textarea');\n    el.value = str;\n    el.setAttribute('readonly', '');\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';\n    document.body.appendChild(el);\n    var selected = document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;\n    el.select();\n    var success = document.execCommand('copy');\n    document.body.removeChild(el);\n\n    if (selected) {\n      document.getSelection().removeAllRanges();\n      document.getSelection().addRange(selected);\n    }\n\n    return success;\n  };\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      copied = _React$useState2[0],\n      setCopied = _React$useState2[1];\n\n  var copy = useCallback(function () {\n    if (!copied) setCopied(copyToClipboard(text));\n  }, [text]);\n  useEffect(function () {\n    return function () {\n      return setCopied(false);\n    };\n  }, [text]);\n  return [copied, copy];\n}\n\n_s(useCopyToClipboard, \"YMyhfnxe2yuU17EyYLSInAP23bc=\");\n\nexport default useCopyToClipboard;","map":{"version":3,"sources":["/Users/ankit/Documents/crypto/gr8/panvala/donation-widget/widget-creator/utils/useCopyToClipBoard.js"],"names":["useCallback","useState","useEffect","useCopyToClipboard","text","copyToClipboard","str","el","document","createElement","value","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","success","execCommand","removeChild","removeAllRanges","addRange","React","copied","setCopied","copy"],"mappings":";;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,SAAhC,QAAiD,OAAjD;;AAEA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;AAAA;;AAChC,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAS;AAC/B,QAAMC,EAAE,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAX;AACAF,IAAAA,EAAE,CAACG,KAAH,GAAWJ,GAAX;AACAC,IAAAA,EAAE,CAACI,YAAH,CAAgB,UAAhB,EAA4B,EAA5B;AACAJ,IAAAA,EAAE,CAACK,KAAH,CAASC,QAAT,GAAoB,UAApB;AACAN,IAAAA,EAAE,CAACK,KAAH,CAASE,IAAT,GAAgB,SAAhB;AACAN,IAAAA,QAAQ,CAACO,IAAT,CAAcC,WAAd,CAA0BT,EAA1B;AACA,QAAMU,QAAQ,GACZT,QAAQ,CAACU,YAAT,GAAwBC,UAAxB,GAAqC,CAArC,GACIX,QAAQ,CAACU,YAAT,GAAwBE,UAAxB,CAAmC,CAAnC,CADJ,GAEI,KAHN;AAIAb,IAAAA,EAAE,CAACc,MAAH;AACA,QAAMC,OAAO,GAAGd,QAAQ,CAACe,WAAT,CAAqB,MAArB,CAAhB;AACAf,IAAAA,QAAQ,CAACO,IAAT,CAAcS,WAAd,CAA0BjB,EAA1B;;AACA,QAAIU,QAAJ,EAAc;AACZT,MAAAA,QAAQ,CAACU,YAAT,GAAwBO,eAAxB;AACAjB,MAAAA,QAAQ,CAACU,YAAT,GAAwBQ,QAAxB,CAAiCT,QAAjC;AACD;;AACD,WAAOK,OAAP;AACD,GAnBD;;AADgC,wBAsBJK,KAAK,CAAC1B,QAAN,CAAe,KAAf,CAtBI;AAAA;AAAA,MAsBzB2B,MAtByB;AAAA,MAsBjBC,SAtBiB;;AAwBhC,MAAMC,IAAI,GAAG9B,WAAW,CAAC,YAAM;AAC7B,QAAI,CAAC4B,MAAL,EAAaC,SAAS,CAACxB,eAAe,CAACD,IAAD,CAAhB,CAAT;AACd,GAFuB,EAErB,CAACA,IAAD,CAFqB,CAAxB;AAGAF,EAAAA,SAAS,CAAC;AAAA,WAAM;AAAA,aAAM2B,SAAS,CAAC,KAAD,CAAf;AAAA,KAAN;AAAA,GAAD,EAA+B,CAACzB,IAAD,CAA/B,CAAT;AAEA,SAAO,CAACwB,MAAD,EAASE,IAAT,CAAP;AACD;;GA9BQ3B,kB;;AAgCT,eAAeA,kBAAf","sourcesContent":["import { useCallback, useState, useEffect } from 'react';\n\nfunction useCopyToClipboard(text) {\n  const copyToClipboard = (str) => {\n    const el = document.createElement('textarea');\n    el.value = str;\n    el.setAttribute('readonly', '');\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';\n    document.body.appendChild(el);\n    const selected =\n      document.getSelection().rangeCount > 0\n        ? document.getSelection().getRangeAt(0)\n        : false;\n    el.select();\n    const success = document.execCommand('copy');\n    document.body.removeChild(el);\n    if (selected) {\n      document.getSelection().removeAllRanges();\n      document.getSelection().addRange(selected);\n    }\n    return success;\n  };\n\n  const [copied, setCopied] = React.useState(false);\n\n  const copy = useCallback(() => {\n    if (!copied) setCopied(copyToClipboard(text));\n  }, [text]);\n  useEffect(() => () => setCopied(false), [text]);\n\n  return [copied, copy];\n}\n\nexport default useCopyToClipboard;\n"]},"metadata":{},"sourceType":"module"}